{
  "FormatVersion": "OOS-2019-06-01",
  "Description": {
    "en": "Sleep control plane, make etcd snapshot and upload it to oss bucket",
    "zh-cn": "ACK专属版master休眠&etcd备份上传",
    "name-en": "ACS-CS-DedicatedMigration",
    "name-zh-cn": "ACK专属版master休眠&etcd备份上传",
    "categories": [
      "others"
    ]
  },
  "Parameters": {
    "regionId": {
      "Type": "String",
      "Label": {
        "en": "RegionId",
        "zh-cn": "地域ID"
      },
      "AssociationProperty": "RegionId",
      "Default": "{{ ACS::RegionId }}"
    },
    "workingDir": {
      "Label": {
        "en": "WorkingDir",
        "zh-cn": "ECS实例中运行命令的目录"
      },
      "Type": "String",
      "Default": "/root"
    },
    "rateControl": {
      "Label": {
        "en": "RateControl",
        "zh-cn": "任务执行的并发比率"
      },
      "Type": "Json",
      "AssociationProperty": "RateControl",
      "Default": {
        "Mode": "Concurrency",
        "MaxErrors": 0,
        "Concurrency": 5
      }
    },
    "targets": {
      "Label": {
        "en": "TargetInstance",
        "zh-cn": "目标实例"
      },
      "Type": "Json",
      "AssociationProperty": "Targets",
      "AssociationPropertyMetadata": {
        "ResourceType": "ALIYUN::ECS::Instance",
        "RegionId": "regionId"
      }
    },
    "action": {
      "Type": "String",
      "Label": {
        "en": "Action",
        "zh-cn": "配置方式"
      },
      "Default": "rollback",
      "AllowedValues": [
        "migrate",
        "rollback"
      ]
    },
    "OOSAssumeRole": {
      "Label": {
        "en": "OOSAssumeRole",
        "zh-cn": "OOS扮演的RAM角色"
      },
      "Type": "String",
      "Default": "OOSServiceRole"
    },
    "BucketName": {
      "Label": {
        "en": "BucketName",
        "zh-cn": "需要上传snapshot的oss路径"
      },
      "Type": "String"
    },
    "OSSEndpoint": {
      "Label": {
        "en": "OSSEndpoint",
        "zh-cn": "需要上传snapshot的oss对应的endpoint"
      },
      "Type": "String"
    },
    "ClusterID": {
      "Label": {
        "en": "ClusterID",
        "zh-cn": "集群的ID"
      },
      "Type": "String"
    }
  },
  "RamRole": "{{ OOSAssumeRole }}",
  "Tasks": [
    {
      "Name": "getInstance",
      "Description": {
        "en": "Views the ECS instances",
        "zh-cn": "获取ECS实例"
      },
      "Action": "ACS::SelectTargets",
      "Properties": {
        "ResourceType": "ALIYUN::ECS::Instance",
        "RegionId": "{{ regionId }}",
        "Filters": [
          "{{ targets }}"
        ]
      },
      "Outputs": {
        "instanceIds": {
          "Type": "List",
          "ValueSelector": "Instances.Instance[].InstanceId"
        }
      }
    },
    {
      "Action": "ACS::ECS::RunCommand",
      "OnError": "rollback",
      "Description": {
        "en": "Execute cloud assistant command",
        "zh-cn": "执行云助手命令"
      },
      "Properties": {
        "regionId": "{{ regionId }}",
        "commandContent": "#!/bin/bash\nset -e\nif [ \"{{action}}\" = \"migrate\" ]; then\n    mkdir -p /etc/kubernetes/manifests.backup\n    if_move=$(ls /etc/kubernetes/manifests/ | wc -l)\n    if [ \"$if_move\" != \"0\" ]; then\n        mv -f /etc/kubernetes/manifests/* /etc/kubernetes/manifests.backup/\n    fi\n    is_ok=0\n    set +e\n    ps -o cmd -p `pidof kubelet` | grep 'container-runtime-endpoint=/var/run/containerd/containerd.sock'\n    if [ $? -ne 0 ]; then\n        echo \"容器运行时不为containerd\"\n        for ((integer = 0; integer < 150; integer++)); do\n            count=$(docker ps | grep kube-apiserver | wc -l)\n            if [ \"$count\" = \"0\" ]; then\n                is_ok=1\n                break\n            else\n                sleep 2\n            fi\n        done\n    else\n        echo \"容器运行时为containerd\"\n        for ((integer = 0; integer < 150; integer++)); do\n            count=$(crictl --runtime-endpoint /var/run/containerd/containerd.sock  ps |grep kube-apiserver | wc -l)\n            if [ \"$count\" = \"0\" ]; then\n                is_ok=1\n                break\n            else\n                sleep 2\n            fi\n        done\n    fi\n    set -e\n    if [ \"$is_ok\" == \"0\" ]; then\n        mv -f /etc/kubernetes/manifests.backup/* /etc/kubernetes/manifests/\n        echo \"Rollback finish\"\n        exit 1\n    else\n        echo \"The control plane is sleeping now.\"\n    fi\nelif [ \"{{action}}\" = \"rollback\" ]; then\n    mkdir -p /etc/kubernetes/manifests.backup\n    if_move=$(ls /etc/kubernetes/manifests.backup/ | wc -l)\n    if [ \"$if_move\" != \"0\" ]; then\n        mv -f /etc/kubernetes/manifests.backup/* /etc/kubernetes/manifests/\n    fi\n    echo \"The control plane is wakeup now.\"\nelse\n    echo \"action must be migrate or rollback\"\n    exit 1\nfi",
        "instanceId": "{{ ACS::TaskLoopItem }}",
        "commandType": "RunShellScript",
        "workingDir": "{{ workingDir }}",
        "timeout": 240
      },
      "Loop": {
        "Items": "{{ getInstance.instanceIds }}",
        "RateControl": "{{ rateControl }}",
        "Outputs": {
          "commandOutputs": {
            "AggregateType": "Fn::ListJoin",
            "AggregateField": "commandOutput"
          }
        }
      },
      "Outputs": {
        "commandOutput": {
          "ValueSelector": "invocationOutput",
          "Type": "String"
        }
      },
      "Name": "sleepOrWakeupControlPlane"
    },
    {
      "Action": "ACS::ECS::RunCommand",
      "OnError": "rollback",
      "Description": {
        "en": "Execute cloud assistant command",
        "zh-cn": "执行云助手命令"
      },
      "Properties": {
        "regionId": "{{ regionId }}",
        "commandContent": "#!/bin/bash\nset -e\nif [ \"{{action}}\" = \"rollback\" ]; then\n    exit 0\nfi\n# 获取eth0 IP\nIP=$(/sbin/ifconfig eth0 | grep inet | grep -v 127.0.0.1 | grep -v inet6 | awk '{print $2}' | tr -d \"addr:\")\nENDPOINT=\"https://$IP:2379\"\necho \"ENDPOINT:  \"$ENDPOINT\nset +e\n# 查询etcd endpoints status，判断该etcd是否为leader\nETCDCTL_API=3 /usr/bin/etcdctl --cacert=/var/lib/etcd/cert/ca.pem --cert=/var/lib/etcd/cert/etcd-server.pem --key=/var/lib/etcd/cert/etcd-server-key.pem --endpoints=$ENDPOINT endpoint status | grep true\nif [ $? -ne 0 ]; then\n    echo \"不为etcd leader所在机器，退出。\"\n    exit 0\nfi\nset -e\nyum install curl wget -y\nif [ ! -f \"/tmp/ossutil64\" ]; then\n    # wget ossutil，保存到/tmp/目录下\n    wget -c -t 10 -O /tmp/ossutil64 https://oos-public-{{regionId}}.oss-{{regionId}}-internal.aliyuncs.com/x64/ossutil64\n    if [ $? -ne 0 ]; then\n        echo \"下载ossutil工具，退出。\"\n        exit 1\n    fi\n    chmod +x /tmp/ossutil64\nfi\nif [ ! -f \"/tmp/modify-prefix\" ]; then\n    echo \"下载modify-prefix\"\n    wget -c -t 10 -O /tmp/modify-prefix https://aliacs-k8s-{{regionId}}.oss-{{regionId}}-internal.aliyuncs.com/public/pkg/etcd/modify-prefix\n    if [ $? -ne 0 ]; then\n        echo \"下载修改prefix工具出错，退出。\"\n        exit 1\n    fi\n    chmod +x /tmp/modify-prefix\nfi\nif ! [[ {{ClusterID}} =~ ^c.* ]];then\n\techo \"clusterID: {{ClusterID}}不是正确的集群id,退出。\"\n    exit 1\nfi\necho \"clusterID: {{ClusterID}}\"\n# 为leader则做snapshot，将snapshot存在在/tmp/\nTIMESTAMP=$(date \"+%Y%m%d%H%M%S\")\nmkdir -p /tmp/etcdsnap\nset -x\nSNAP_NAME=etcd_$TIMESTAMP\necho \"开始备份，备份名为/tmp/\"$SNAP_NAME\nDestPrefix=\"/\"{{ClusterID}}\nETCDCTL_API=3 /usr/bin/etcdctl --cacert=/var/lib/etcd/cert/ca.pem --cert=/var/lib/etcd/cert/etcd-server.pem --key=/var/lib/etcd/cert/etcd-server-key.pem --endpoints=$ENDPOINT snapshot save /tmp/etcdsnap/$SNAP_NAME\n/tmp/modify-prefix modify-prefix --db=/tmp/etcdsnap/$SNAP_NAME --src-prefix=/registry --dest-prefix=$DestPrefix --bucket=key\nif [ $? -ne 0 ]; then\n    echo \"修改prefix出错，退出。\"\n    exit 1\nfi\n# 获取oss 相关地址，上传\nROLE=$(curl -s 100.100.100.200/latest/meta-data/ram/security-credentials/)\nROLERES=$(curl -s 100.100.100.200/latest/meta-data/ram/security-credentials/$ROLE)\nAccessKeyId=$(echo $ROLERES | python -c \"import sys, json; print json.load(sys.stdin)['AccessKeyId']\")\nAccessKeySecret=$(echo $ROLERES | python -c \"import sys, json; print json.load(sys.stdin)['AccessKeySecret']\")\nSecurityToken=$(echo $ROLERES | python -c \"import sys, json; print json.load(sys.stdin)['SecurityToken']\")\n# put object to oss\necho \"begin put object to oss\"\n/tmp/ossutil64 -t $SecurityToken -i $AccessKeyId -k $AccessKeySecret -e {{OSSEndpoint}} cp /tmp/etcdsnap/$SNAP_NAME oss://{{BucketName}}/$SNAP_NAME\n# sign\noss_url=$(/tmp/ossutil64 -t $SecurityToken -i $AccessKeyId -k $AccessKeySecret -e {{OSSEndpoint}} sign --timeout 2400 oss://{{BucketName}}/$SNAP_NAME | grep -v \"elapsed\" | tr -d '\\n')\nset +x\nsakey=$(cat /etc/kubernetes/pki/sa.key | base64 -w0)\nsapub=$(cat /etc/kubernetes/pki/sa.pub | base64 -w0)\nfrontcrt=$(cat /etc/kubernetes/pki/front-proxy-ca.crt | base64 -w0)\nfrontkey=$(cat /etc/kubernetes/pki/front-proxy-ca.key | base64 -w0)\necho \"{\\\"sakey\\\":\\\"$sakey\\\",\\\"sapub\\\":\\\"$sapub\\\",\\\"frontcrt\\\":\\\"$frontcrt\\\",\\\"frontkey\\\":\\\"$frontkey\\\",\\\"oss_url\\\":\\\"$oss_url\\\"}\" >/tmp/etcdsnap/sign",
        "instanceId": "{{ ACS::TaskLoopItem }}",
        "commandType": "RunShellScript",
        "workingDir": "{{ workingDir }}",
        "timeout": 600
      },
      "Loop": {
        "Items": "{{ getInstance.instanceIds }}",
        "RateControl": "{{ rateControl }}",
        "Outputs": {
          "commandOutputs": {
            "AggregateType": "Fn::ListJoin",
            "AggregateField": "commandOutput"
          }
        }
      },
      "Outputs": {
        "commandOutput": {
          "ValueSelector": "invocationOutput",
          "Type": "String"
        }
      },
      "Name": "etcdCheckout"
    },
    {
      "Action": "ACS::ECS::RunCommand",
      "OnError": "rollback",
      "Description": {
        "En": "Execute cloud assistant command",
        "Zh-cn": "执行云助手命令"
      },
      "Properties": {
        "regionId": "{{ regionId }}",
        "commandContent": "#!/bin/bash\nif [ \"{{action}}\" = \"rollback\" ]; then\n    exit 0\nfi\nif [ -e  /tmp/etcdsnap/sign ]; then\n    curl --retry 10 -sSL 100.100.100.200/latest/meta-data/instance-id\nfi",
        "instanceId": "{{ ACS::TaskLoopItem }}",
        "commandType": "RunShellScript",
        "workingDir": "{{ workingDir }}",
        "timeout": 60
      },
      "Loop": {
        "Items": "{{ getInstance.instanceIds }}",
        "RateControl": "{{ rateControl }}",
        "Outputs": {
          "commandOutputs": {
            "AggregateType": "Fn::ListJoin",
            "AggregateField": "commandOutput"
          }
        }
      },
      "Outputs": {
        "commandOutput": {
          "ValueSelector": "invocationOutput",
          "Type": "String"
        }
      },
      "Name": "findLeader"
    },
    {
      "Action": "ACS::ECS::RunCommand",
      "OnError": "rollback",
      "OnSuccess": "ACS::END",
      "Description": {
        "en": "Execute cloud assistant command",
        "zh-cn": "执行云助手命令"
      },
      "Properties": {
        "regionId": "{{ regionId }}",
        "commandContent": "#!/bin/bash\nif [ \"{{action}}\" = \"rollback\" ]; then\n    exit 0\nfi\nif [ -e  /tmp/etcdsnap/sign ]; then\n    cat /tmp/etcdsnap/sign\n    rm -rf /tmp/etcdsnap/sign\nfi",
        "instanceId": "{{ ACS::TaskLoopItem }}",
        "commandType": "RunShellScript",
        "workingDir": "{{ workingDir }}",
        "timeout": 60
      },
      "Loop": {
        "Items": {
          "Fn::Intersection": [
            "{{ getInstance.instanceIds }}",
            "{{ findLeader.commandOutputs }}"
          ]
        },
        "RateControl": "{{ rateControl }}",
        "Outputs": {
          "commandOutputs": {
            "AggregateType": "Fn::ListJoin",
            "AggregateField": "commandOutput"
          }
        }
      },
      "Outputs": {
        "commandOutput": {
          "ValueSelector": "invocationOutput",
          "Type": "String"
        }
      },
      "Name": "readSign"
    },
    {
      "Action": "ACS::ECS::RunCommand",
      "Description": {
        "en": "Execute cloud assistant command",
        "zh-cn": "执行云助手命令"
      },
      "Properties": {
        "regionId": "{{ regionId }}",
        "commandContent": "#!/bin/bash\nset -e\nmkdir -p /etc/kubernetes/manifests.backup\nif_move=$(ls /etc/kubernetes/manifests.backup/ | wc -l)\nif [ \"$if_move\" != \"0\" ]; then\n    mv -f /etc/kubernetes/manifests.backup/* /etc/kubernetes/manifests/\nfi\necho \"The control plane is wakeup now.\"",
        "instanceId": "{{ ACS::TaskLoopItem }}",
        "commandType": "RunShellScript",
        "workingDir": "{{ workingDir }}",
        "timeout": 240
      },
      "Loop": {
        "Items": "{{ getInstance.instanceIds }}",
        "RateControl": "{{ rateControl }}",
        "Outputs": {
          "commandOutputs": {
            "AggregateType": "Fn::ListJoin",
            "AggregateField": "commandOutput"
          }
        }
      },
      "Outputs": {
        "commandOutput": {
          "ValueSelector": "invocationOutput",
          "Type": "String"
        }
      },
      "Name": "rollback"
    }
  ],
  "Outputs": {
    "sleepOrWakeupControlPlaneOutputs": {
      "Type": "List",
      "Value": "{{ sleepOrWakeupControlPlane.commandOutputs }}"
    },
    "etcdCheckoutOutputs": {
      "Type": "List",
      "Value": "{{ etcdCheckout.commandOutputs }}"
    },
    "findLeaderOutputs": {
      "Type": "List",
      "Value": "{{ findLeader.commandOutputs }}"
    },
    "readSignOutputs": {
      "Type": "List",
      "Value": "{{ readSign.commandOutputs }}"
    }
  },
  "Metadata": {
    "ALIYUN::OOS::Interface": {
      "ParameterGroups": [
        {
          "Parameters": [
            "ClusterID",
            "action",
            "BucketName",
            "OSSEndpoint",
            "workingDir"
          ],
          "Label": {
            "default": {
              "zh-cn": "配置参数",
              "en": "Configure Parameters"
            }
          }
        },
        {
          "Parameters": [
            "regionId",
            "targets"
          ],
          "Label": {
            "default": {
              "zh-cn": "选择实例",
              "en": "Select ECS Instance"
            }
          }
        },
        {
          "Parameters": [
            "rateControl",
            "OOSAssumeRole"
          ],
          "Label": {
            "default": {
              "zh-cn": "高级选项",
              "en": "Control Options"
            }
          }
        }
      ]
    }
  }
}