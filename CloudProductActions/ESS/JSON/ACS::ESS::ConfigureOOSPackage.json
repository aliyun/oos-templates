{
  "FormatVersion": "OOS-2019-06-01",
  "Description": {
    "name-en": "ACS::ESS::ConfigureOOSPackage",
    "name-zh-cn": "在伸缩组内的ECS实例中安装OOS自定义软件包",
    "en": "Configure oos package on ECS instances that in scaling group",
    "zh-cn": "在伸缩组内的ECS实例中安装OOS自定义软件包"
  },
  "Parameters": {
    "regionId": {
      "Description": {
        "en": "The ID of region",
        "zh-cn": "地域ID"
      },
      "Type": "String",
      "Default": "{{ ACS::RegionId }}"
    },
    "rollBack": {
      "Description": {
        "en": "Whether to roll back",
        "zh-cn": "是否回滚"
      },
      "Type": "String",
      "AllowedValues": [
        "true",
        "false"
      ],
      "Default": "false"
    },
    "instanceId": {
      "Description": {
        "en": "The ID of ECS instance",
        "zh-cn": "ECS实例ID"
      },
      "Type": "String",
      "MinLength": 1,
      "MaxLength": 30
    },
    "action": {
      "Description": {
        "en": "The action to configure package",
        "zh-cn": "安装软件包的方式"
      },
      "Type": "String",
      "AllowedValues": [
        "install",
        "uninstall"
      ],
      "Default": "install"
    },
    "packageName": {
      "Description": {
        "en": "The name of package",
        "zh-cn": "软件包名称"
      },
      "Type": "String"
    },
    "packageVersion": {
      "Description": {
        "en": "The version of OOS package",
        "zh-cn": "OOS软件包版本"
      },
      "Type": "String",
      "Default": ""
    },
    "scalingGroupId": {
      "Description": {
        "en": "The ID of scaling group",
        "zh-cn": "伸缩组ID"
      },
      "Type": "String"
    }
  },
  "Tasks": [
    {
      "Name": "viewInstanceLifecycleState",
      "Action": "ACS::ExecuteApi",
      "Description": {
        "en": "Queries ECS instance lifecycle status",
        "zh-cn": "获取实例生命周期挂钩的状态"
      },
      "Properties": {
        "Service": "ESS",
        "API": "DescribeScalingInstances",
        "Parameters": {
          "RegionId": "{{ regionId }}",
          "InstanceId1": "{{ instanceId }}"
        }
      },
      "Outputs": {
        "lifecycleState": {
          "Type": "String",
          "ValueSelector": "ScalingInstances.ScalingInstance[].LifecycleState"
        }
      }
    },
    {
      "Name": "whetherLifecycleStateIsStandby",
      "Action": "ACS::Choice",
      "Description": {
        "en": "Choose next task by lifecycle status",
        "zh-cn": "根据实例生命周期挂钩的状态选择下一个任务"
      },
      "Properties": {
        "DefaultTask": "enterStandby",
        "Choices": [
          {
            "When": {
              "Fn::Equals": [
                "Standby",
                "{{ viewInstanceLifecycleState.lifecycleState }}"
              ]
            },
            "NextTask": "queryInstanceOSType"
          }
        ]
      }
    },
    {
      "Name": "enterStandby",
      "Action": "ACS::WaitFor",
      "Description": {
        "en": "Waits for ECS instance to enter standby status",
        "zh-cn": "等待实例进入standby状态"
      },
      "Retries": 30,
      "Delay": 10,
      "DelayType": "Constant",
      "Properties": {
        "Service": "ESS",
        "API": "EnterStandby",
        "Parameters": {
          "RegionId": "{{ regionId }}",
          "ScalingGroupId": "{{ scalingGroupId }}",
          "InstanceId": [
            "{{ instanceId }}"
          ]
        },
        "DesiredValues": [
          "CodeNotExists"
        ],
        "StopRetryValues": [
          "OtherCodes"
        ],
        "PropertySelector": ".| if .Code==null then \"CodeNotExists\" else if .Code==\"BackendServer.configuring\" then \"RetryCodeExists\" else \"OtherCodes\" end end"
      }
    },
    {
      "Name": "queryInstanceOSType",
      "Action": "ACS::ExecuteApi",
      "Description": {
        "en": "Queries ECS instance OS type",
        "zh-cn": "获取实例操作系统类型"
      },
      "Properties": {
        "Service": "ECS",
        "API": "DescribeInstances",
        "Parameters": {
          "RegionId": "{{ regionId }}",
          "InstanceIds": [
            "{{ instanceId }}"
          ]
        }
      },
      "Outputs": {
        "OSType": {
          "Type": "String",
          "ValueSelector": "Instances.Instance[].OSType"
        }
      }
    },
    {
      "Name": "configureLinuxPackage",
      "Description": {
        "en": "Configures OOS package on Linux instance",
        "zh-cn": "在Linux类型实例中安装OOS软件包"
      },
      "When": {
        "Fn::Equals": [
          "{{ queryInstanceOSType.OSType }}",
          "linux"
        ]
      },
      "Action": "ACS::ECS::RunCommand",
      "Properties": {
        "instanceId": "{{ instanceId }}",
        "regionId": "{{ regionId }}",
        "commandType": "RunShellScript",
        "commandContent": "#/bin/bash\ncurrent_version=`aliyun-service -v`\nspecified_version=1.0.2.497\n\nif [[ $current_version > $specified_version ]]; then\n  if  [ '{{ packageVersion }}' = '' ] ; then\n     acs-plugin-manager --exec -P oosutil --params configure_package,{{action}},{{packageName}}\n  else\n     acs-plugin-manager --exec -P oosutil --params configure_package,{{action}},{{packageName}},--package-version,{{packageVersion}}\n  fi\nelse\n  version='{{ ACS::OOSUtilVersion }}'\n  path=/usr/local/share/aliyun-oosutil/$version\n  test -e $path || mkdir -p $path\n  currentPath=`pwd`\n  cd $path && test -e oosutil_linux || wget -q \"https://oos-public-{{regionId}}.oss-{{regionId}}-internal.aliyuncs.com/oosutil/$version/linux/oosutil_linux\"\n  chmod +x oosutil_linux\n  cd $currentPath\n  if  [ '{{ packageVersion }}' = '' ] ; then\n    $path/oosutil_linux configure_package {{action}} {{packageName}}\n  else\n    $path/oosutil_linux configure_package {{action}} {{packageName}} --package-version {{packageVersion}}\n  fi\nfi"
      },
      "Outputs": {
        "commandOutput": {
          "Type": "String",
          "ValueSelector": "invocationOutput"
        }
      }
    },
    {
      "Name": "configureWindowsPackage",
      "Description": {
        "en": "Configures OOS package on Windows instance",
        "zh-cn": "在Windows类型实例中安装OOS软件包"
      },
      "When": {
        "Fn::Equals": [
          "{{ queryInstanceOSType.OSType }}",
          "windows"
        ]
      },
      "Action": "ACS::ECS::RunCommand",
      "Properties": {
        "regionId": "{{ regionId }}",
        "instanceId": "{{ instanceId }}",
        "commandType": "RunPowerShellScript",
        "commandContent": "$current_version=(aliyun_assist_service.exe -v)\n$specified_version=\"1.0.0.134\"\nif ($current_version -gt $specified_version){\n  if ('{{ packageVersion }}'){\n    acs-plugin-manager.exe --exec -P oosutil_win --params \"configure_package,{{action}},{{packageName}},--package-version,{{packageVersion}}\"\n  }else{\n    acs-plugin-manager.exe --exec -P oosutil_win --params \"configure_package,{{action}},{{packageName}}\"\n  }\n}else{\n  $version=\"{{ACS::OOSUtilVersion}}\"\n  $path = \"C:\\aliyun-oosutil\\$version\"\n  $currentPath=(pwd)\n  $pathExistOrNot = Test-Path -Path \"$path\"\n  if ($pathExistOrNot){\n      cd $path\n  }else{\n      mkdir $path\n      cd $path\n  }\n  $client = new-object System.Net.WebClient\n  $client.DownloadFile(\"https://oos-public-{{ACS::RegionId}}.oss-{{ACS::RegionId}}-internal.aliyuncs.com/oosutil/$version/windows/oosutil_windows.exe\", \"$path/oosutil_windows.exe\")\n  cd $currentPath\n  if ('{{ packageVersion }}'){\n    C:\\aliyun-oosutil\\{{ ACS::OOSUtilVersion }}\\oosutil_windows.exe configure_package {{action}} {{packageName}} --package-version {{ packageVersion }}\n  }else{\n    C:\\aliyun-oosutil\\{{ ACS::OOSUtilVersion }}\\oosutil_windows.exe configure_package {{action}} {{packageName}}\n  }\n}"
      },
      "Outputs": {
        "commandOutput": {
          "Type": "String",
          "ValueSelector": "invocationOutput"
        }
      }
    },
    {
      "Name": "whetherToRollbackExitStandBy",
      "Action": "ACS::Choice",
      "Description": {
        "en": "Choose next task by rollback parameter",
        "zh-cn": "根据回滚参数选择下一个任务"
      },
      "Properties": {
        "DefaultTask": "whetherToExitStandBy",
        "Choices": [
          {
            "When": {
              "Fn::Equals": [
                "true",
                "{{ rollBack }}"
              ]
            },
            "NextTask": "exitStandBy"
          }
        ]
      }
    },
    {
      "Name": "whetherToExitStandBy",
      "Action": "ACS::Choice",
      "Description": {
        "en": "Choose next task by instance lifecycle status",
        "zh-cn": "根据实例生命周期挂钩的状态选择下一个任务"
      },
      "Properties": {
        "DefaultTask": "exitStandBy",
        "Choices": [
          {
            "When": {
              "Fn::Equals": [
                "Standby",
                "{{ viewInstanceLifecycleState.lifecycleState }}"
              ]
            },
            "NextTask": "ACS::END"
          }
        ]
      }
    },
    {
      "Name": "exitStandBy",
      "Action": "ACS::WaitFor",
      "Description": {
        "en": "Modifies the state of ECS instances in a scaling group from Standby to Running",
        "zh-cn": "设置伸缩组内处于备用状态的ECS实例为运行中状态"
      },
      "Retries": 30,
      "Delay": 10,
      "DelayType": "Constant",
      "Properties": {
        "Service": "ESS",
        "API": "ExitStandBy",
        "Parameters": {
          "RegionId": "{{ regionId }}",
          "ScalingGroupId": "{{ scalingGroupId }}",
          "InstanceId": [
            "{{ instanceId }}"
          ]
        },
        "DesiredValues": [
          "CodeNotExists"
        ],
        "StopRetryValues": [
          "OtherCodes"
        ],
        "PropertySelector": ".| if .Code==null then \"CodeNotExists\" else if .Code==\"BackendServer.configuring\" then \"RetryCodeExists\" else \"OtherCodes\" end end"
      }
    }
  ],
  "Outputs": {
    "commandOutput": {
      "Type": "String",
      "Value": {
        "Fn::If": [
          {
            "Fn::Equals": [
              "linux",
              "{{ queryInstanceOSType.OSType }}"
            ]
          },
          "{{ configureLinuxPackage.commandOutput }}",
          "{{ configureWindowsPackage.commandOutput }}"
        ]
      }
    }
  }
}