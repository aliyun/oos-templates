FormatVersion: OOS-2019-06-01
Description:
  name-en: ACS::ESS::RunCommand
  name-zh-cn: 在伸缩组内的ECS实例中执行云助手命令。
  en: Creates cloud assistant command and triggers it on one ECS instance in scaling group
  zh-cn: 在伸缩组内ECS实例上执行云助手命令
Parameters:
  regionId:
    Description:
      en: The ID of region
      zh-cn: 地域ID
    Type: String
    Default: '{{ ACS::RegionId }}'
  rollBack:
    Description:
      en: Whether to rollback
      zh-cn: 是否回滚
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
  commandContent:
    Description:
      en: The content of command
      zh-cn: 云助手命令
    Type: String
  instanceId:
    Description:
      en: The ID of ECS instance
      zh-cn: ECS实例ID
    Type: String
    MinLength: 1
    MaxLength: 30
  commandType:
    Description:
      en: The type of command
      zh-cn: 云助手命令类型
    Type: String
    AllowedValues:
    - RunBatScript
    - RunPowerShellScript
    - RunShellScript
  workingDir:
    Description:
      en: The directory where the created command runs on the ECS instances
      zh-cn: 云助手命令在实例中执行的目录
    Type: String
    Default: ""
  timeout:
    Description:
      en: The value of the invocation timeout period of a command on ECS instances
      zh-cn: 云助手命令执行超时时间
    Type: Number
    Default: 600
  scalingGroupId:
    Description:
      en: The ID of scaling group
      zh-cn: 伸缩组ID
    Type: String
Tasks:
- Name: viewInstanceLifecycleState
  Action: ACS::ExecuteApi
  Description:
    en: Queries ECS instance lifecycle status
    zh-cn: 获取实例生命周期挂钩的状态
  Properties:
    Service: ESS
    API: DescribeScalingInstances
    Parameters:
      RegionId: '{{ regionId }}'
      InstanceId1: '{{ instanceId }}'
  Outputs:
    lifecycleState:
      Type: String
      ValueSelector: ScalingInstances.ScalingInstance[].LifecycleState
- Name: whetherLifecycleStateIsStandby
  Action: 'ACS::Choice'
  Description:
    en: Choose next task by lifecycle status
    zh-cn: 根据实例生命周期挂钩的状态选择下一个任务
  Properties:
    DefaultTask: enterStandby
    Choices:
      - When:
          Fn::Equals:
            - 'Standby'
            - '{{ viewInstanceLifecycleState.lifecycleState }}'
        NextTask: runCommand
- Name: enterStandby
  Action: ACS::WaitFor
  Description:
    en: Waits ECS instance to enter standby status
    zh-cn: 等待实例进入备用中状态
  Retries: 30
  Delay: 10
  DelayType: Constant
  Properties:
    Service: ESS
    API: EnterStandby
    Parameters:
      RegionId: '{{ regionId }}'
      ScalingGroupId: '{{ scalingGroupId }}'
      InstanceId:
        - '{{ instanceId }}'
    DesiredValues:
      - CodeNotExists
    StopRetryValues:
      - OtherCodes
    PropertySelector: '.| if .Code==null then "CodeNotExists" else if .Code=="BackendServer.configuring" then "RetryCodeExists" else "OtherCodes" end end'
- Name: runCommand
  Action: 'ACS::ExecuteAPI'
  Description:
    en: Executes cloud assistant command on ECS instance
    zh-cn: 在ECS实例中执行云助手命令
  Properties:
    Service: ECS
    API: RunCommand
    Parameters:
      RegionId: '{{ regionId }}'
      CommandContent: '{{ commandContent }}'
      InstanceIds:
        - '{{instanceId}}'
      Name: '{{ ACS::ExecutionId }}'
      Type: '{{ commandType }}'
      WorkingDir: '{{ workingDir }}'
      Timeout: '{{ timeout }}'
  Outputs:
    invokeId:
      Type: String
      ValueSelector: InvokeId
- Name: untilInvocationReady
  Action: ACS::WaitFor
  Description:
    en: Waits for the command to be completed
    zh-cn: 等待云助手命令执行结束
  OnError: ACS::END
  Retries: 20
  Properties:
    Service: ECS
    API: DescribeInvocations
    Parameters:
      RegionId: '{{ regionId }}'
      InvokeId: '{{ runCommand.invokeId }}'
    DesiredValues:
    - Finished
    StopRetryValues:
    - Failed
    PropertySelector: Invocations.Invocation[].InvokeStatus
- Name: describeInvocationResults
  Action: ACS::ExecuteAPI
  Description:
    en: Queries the command output of a cloud assistant command in the specified ECS instance
    zh-cn: 获取云助手命令执行结果
  Properties:
    Service: ECS
    API: DescribeInvocationResults
    Parameters:
      RegionId: '{{ regionId }}'
      InvokeId: '{{ runCommand.invokeId }}'
  Outputs:
    invocationResult:
      Type: String
      ValueSelector: 'Invocation.InvocationResults.InvocationResult[].Output'
- Name: checkInvocationResult
  Action: 'ACS::CheckFor'
  Description:
    en: Check whether the command ExitCode is 0
    zh-cn: 检查命令执行ExitCode是否为0
  OnError: 'ACS::END'
  Properties:
    Service: ECS
    API: DescribeInvocationResults
    Parameters:
      RegionId: '{{ regionId }}'
      InvokeId: '{{ runCommand.InvokeId }}'
    PropertySelector: 'Invocation.InvocationResults.InvocationResult[].ExitCode'
    DesiredValues:
      - 0
- Name: whetherToRollbackExitStandBy
  Action: 'ACS::Choice'
  Description:
    en: Choose next task by rollback parameter
    zh-cn: 根据回滚参数选择下一个任务
  Properties:
    DefaultTask: whetherToExitStandBy
    Choices:
      - When:
          Fn::Equals:
            - 'true'
            - '{{ rollBack }}'
        NextTask: exitStandBy
- Name: whetherToExitStandBy
  Action: 'ACS::Choice'
  Description:
    en: Choose next task by lifecycle status
    zh-cn: 根据生命周期挂钩状态选择下一个任务
  Properties:
    DefaultTask: exitStandBy
    Choices:
      - When:
          Fn::Equals:
            - 'Standby'
            - '{{ viewInstanceLifecycleState.lifecycleState }}'
        NextTask: ACS::END
- Name: exitStandBy
  Action: ACS::WaitFor
  Description:
    en: Modifies the state of ECS instances in a scaling group from Standby to Running
    zh-cn: 设置伸缩组内处于备用状态的ECS实例为运行中状态
  Retries: 30
  Delay: 10
  DelayType: Constant
  Properties:
    Service: ESS
    API: ExitStandBy
    Parameters:
      RegionId: '{{ regionId }}'
      ScalingGroupId: '{{ scalingGroupId }}'
      InstanceId:
        - '{{ instanceId }}'
    DesiredValues:
      - CodeNotExists
    StopRetryValues:
      - OtherCodes
    PropertySelector: '.| if .Code==null then "CodeNotExists" else if .Code=="BackendServer.configuring" then "RetryCodeExists" else "OtherCodes" end end'
Outputs:
  invocationOutput:
    Type: String
    Value:
      'Fn::Base64Decode': '{{ describeInvocationResults.invocationResult }}'